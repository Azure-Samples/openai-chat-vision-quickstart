{
  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.36.177.2456",
      "templateHash": "7951515563317548009"
    }
  },
  "parameters": {
    "name": {
      "type": "string",
      "minLength": 1,
      "maxLength": 64,
      "metadata": {
        "description": "Name which is used to generate a short unique hash for each resource"
      }
    },
    "location": {
      "type": "string",
      "minLength": 1,
      "metadata": {
        "description": "Primary location for all resources"
      }
    },
    "principalId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Id of the user or app to assign application roles"
      }
    },
    "createRoleForUser": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Flag to decide where to create OpenAI role for current user"
      }
    },
    "openAILocation": {
      "type": "string",
      "allowedValues": [
        "australiaeast",
        "brazilsouth",
        "canadaeast",
        "eastus",
        "eastus2",
        "francecentral",
        "germanywestcentral",
        "japaneast",
        "koreacentral",
        "northcentralus",
        "norwayeast",
        "polandcentral",
        "spaincentral",
        "southafricanorth",
        "southcentralus",
        "southindia",
        "swedencentral",
        "switzerlandnorth",
        "uksouth",
        "westeurope",
        "westus",
        "westus3"
      ],
      "metadata": {
        "azd": {
          "type": "location"
        },
        "description": "Location for the OpenAI resource"
      },
      "minLength": 1
    },
    "openAiResourceName": {
      "type": "string",
      "defaultValue": ""
    },
    "openAiResourceGroupName": {
      "type": "string",
      "defaultValue": ""
    },
    "openAiApiVersion": {
      "type": "string",
      "defaultValue": ""
    },
    "disableKeyBasedAuth": {
      "type": "bool",
      "defaultValue": true
    },
    "openAiSkuName": {
      "type": "string"
    },
    "openAiModelName": {
      "type": "string"
    },
    "openAiModelVersion": {
      "type": "string"
    },
    "openAiDeploymentName": {
      "type": "string"
    },
    "openAiDeploymentCapacity": {
      "type": "int"
    },
    "openAiDeploymentSkuName": {
      "type": "string"
    },
    "createAzureOpenAi": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Flag to decide whether to create Azure OpenAI instance or not"
      }
    },
    "openAiKey": {
      "type": "securestring",
      "defaultValue": "",
      "metadata": {
        "description": "Azure OpenAI key to use for authentication. If not provided, managed identity will be used (and is preferred)"
      }
    },
    "openAiEndpoint": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Azure OpenAI endpoint to use. If provided, no Azure OpenAI instance will be created."
      }
    },
    "acaExists": {
      "type": "bool",
      "defaultValue": false
    }
  },
  "variables": {
    "resourceToken": "[toLower(uniqueString(subscription().id, parameters('name'), parameters('location')))]",
    "tags": {
      "azd-env-name": "[parameters('name')]"
    },
    "prefix": "[format('{0}-{1}', parameters('name'), variables('resourceToken'))]"
  },
  "resources": [
    {
      "type": "Microsoft.Resources/resourceGroups",
      "apiVersion": "2021-04-01",
      "name": "[format('{0}-rg', parameters('name'))]",
      "location": "[parameters('location')]",
      "tags": "[variables('tags')]"
    },
    {
      "condition": "[parameters('createAzureOpenAi')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "openai",
      "resourceGroup": "[if(not(empty(parameters('openAiResourceGroupName'))), parameters('openAiResourceGroupName'), format('{0}-rg', parameters('name')))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": "[if(not(empty(parameters('openAiResourceName'))), createObject('value', parameters('openAiResourceName')), createObject('value', format('{0}-cog', variables('resourceToken'))))]",
          "location": {
            "value": "[parameters('openAILocation')]"
          },
          "tags": {
            "value": "[variables('tags')]"
          },
          "disableLocalAuth": {
            "value": "[parameters('disableKeyBasedAuth')]"
          },
          "sku": {
            "value": {
              "name": "[parameters('openAiSkuName')]"
            }
          },
          "deployments": {
            "value": [
              {
                "name": "[parameters('openAiDeploymentName')]",
                "model": {
                  "format": "OpenAI",
                  "name": "[parameters('openAiModelName')]",
                  "version": "[parameters('openAiModelVersion')]"
                },
                "sku": {
                  "name": "[parameters('openAiDeploymentSkuName')]",
                  "capacity": "[parameters('openAiDeploymentCapacity')]"
                }
              }
            ]
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.36.177.2456",
              "templateHash": "8574980658850812913"
            },
            "description": "Creates an Azure Cognitive Services instance."
          },
          "parameters": {
            "name": {
              "type": "string"
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            },
            "customSubDomainName": {
              "type": "string",
              "defaultValue": "[parameters('name')]",
              "metadata": {
                "description": "The custom subdomain name used to access the API. Defaults to the value of the name parameter."
              }
            },
            "disableLocalAuth": {
              "type": "bool",
              "defaultValue": false
            },
            "deployments": {
              "type": "array",
              "defaultValue": []
            },
            "kind": {
              "type": "string",
              "defaultValue": "OpenAI"
            },
            "publicNetworkAccess": {
              "type": "string",
              "defaultValue": "Enabled",
              "allowedValues": [
                "Enabled",
                "Disabled"
              ]
            },
            "sku": {
              "type": "object",
              "defaultValue": {
                "name": "S0"
              }
            },
            "allowedIpRules": {
              "type": "array",
              "defaultValue": []
            },
            "networkAcls": {
              "type": "object",
              "defaultValue": "[if(empty(parameters('allowedIpRules')), createObject('defaultAction', 'Allow'), createObject('ipRules', parameters('allowedIpRules'), 'defaultAction', 'Deny'))]"
            }
          },
          "resources": [
            {
              "type": "Microsoft.CognitiveServices/accounts",
              "apiVersion": "2023-05-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "kind": "[parameters('kind')]",
              "properties": {
                "customSubDomainName": "[parameters('customSubDomainName')]",
                "publicNetworkAccess": "[parameters('publicNetworkAccess')]",
                "networkAcls": "[parameters('networkAcls')]",
                "disableLocalAuth": "[parameters('disableLocalAuth')]"
              },
              "sku": "[parameters('sku')]"
            },
            {
              "copy": {
                "name": "deployment",
                "count": "[length(parameters('deployments'))]",
                "mode": "serial",
                "batchSize": 1
              },
              "type": "Microsoft.CognitiveServices/accounts/deployments",
              "apiVersion": "2023-05-01",
              "name": "[format('{0}/{1}', parameters('name'), parameters('deployments')[copyIndex()].name)]",
              "properties": {
                "model": "[parameters('deployments')[copyIndex()].model]",
                "raiPolicyName": "[if(contains(parameters('deployments')[copyIndex()], 'raiPolicyName'), parameters('deployments')[copyIndex()].raiPolicyName, null())]"
              },
              "sku": "[if(contains(parameters('deployments')[copyIndex()], 'sku'), parameters('deployments')[copyIndex()].sku, createObject('name', 'Standard', 'capacity', 20))]",
              "dependsOn": [
                "[resourceId('Microsoft.CognitiveServices/accounts', parameters('name'))]"
              ]
            }
          ],
          "outputs": {
            "endpoint": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.CognitiveServices/accounts', parameters('name')), '2023-05-01').endpoint]"
            },
            "endpoints": {
              "type": "object",
              "value": "[reference(resourceId('Microsoft.CognitiveServices/accounts', parameters('name')), '2023-05-01').endpoints]"
            },
            "id": {
              "type": "string",
              "value": "[resourceId('Microsoft.CognitiveServices/accounts', parameters('name'))]"
            },
            "name": {
              "type": "string",
              "value": "[parameters('name')]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', format('{0}-rg', parameters('name')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "loganalytics",
      "resourceGroup": "[format('{0}-rg', parameters('name'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[format('{0}-loganalytics', variables('prefix'))]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[variables('tags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.36.177.2456",
              "templateHash": "6799050864532564054"
            },
            "description": "Creates a Log Analytics workspace."
          },
          "parameters": {
            "name": {
              "type": "string"
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            }
          },
          "resources": [
            {
              "type": "Microsoft.OperationalInsights/workspaces",
              "apiVersion": "2021-12-01-preview",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "retentionInDays": 30,
                "features": {
                  "searchVersion": 1
                },
                "sku": {
                  "name": "PerGB2018"
                }
              }
            }
          ],
          "outputs": {
            "id": {
              "type": "string",
              "value": "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('name'))]"
            },
            "name": {
              "type": "string",
              "value": "[parameters('name')]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', format('{0}-rg', parameters('name')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "container-apps",
      "resourceGroup": "[format('{0}-rg', parameters('name'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "app"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[variables('tags')]"
          },
          "containerAppsEnvironmentName": {
            "value": "[format('{0}-containerapps-env', variables('prefix'))]"
          },
          "containerRegistryName": {
            "value": "[format('{0}registry', replace(variables('prefix'), '-', ''))]"
          },
          "logAnalyticsWorkspaceName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('{0}-rg', parameters('name'))), 'Microsoft.Resources/deployments', 'loganalytics'), '2022-09-01').outputs.name.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.36.177.2456",
              "templateHash": "11776998885469396891"
            },
            "description": "Creates an Azure Container Registry and an Azure Container Apps environment."
          },
          "parameters": {
            "name": {
              "type": "string"
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            },
            "containerAppsEnvironmentName": {
              "type": "string"
            },
            "containerRegistryName": {
              "type": "string"
            },
            "containerRegistryResourceGroupName": {
              "type": "string",
              "defaultValue": ""
            },
            "containerRegistryAdminUserEnabled": {
              "type": "bool",
              "defaultValue": false
            },
            "logAnalyticsWorkspaceName": {
              "type": "string"
            },
            "applicationInsightsName": {
              "type": "string",
              "defaultValue": ""
            },
            "daprEnabled": {
              "type": "bool",
              "defaultValue": false
            }
          },
          "resources": [
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-container-apps-environment', parameters('name'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[parameters('containerAppsEnvironmentName')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "logAnalyticsWorkspaceName": {
                    "value": "[parameters('logAnalyticsWorkspaceName')]"
                  },
                  "applicationInsightsName": {
                    "value": "[parameters('applicationInsightsName')]"
                  },
                  "daprEnabled": {
                    "value": "[parameters('daprEnabled')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.36.177.2456",
                      "templateHash": "2752869305972816250"
                    },
                    "description": "Creates an Azure Container Apps environment."
                  },
                  "parameters": {
                    "name": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]"
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {}
                    },
                    "applicationInsightsName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Name of the Application Insights resource"
                      }
                    },
                    "daprEnabled": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Specifies if Dapr is enabled"
                      }
                    },
                    "logAnalyticsWorkspaceName": {
                      "type": "string",
                      "metadata": {
                        "description": "Name of the Log Analytics workspace"
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.App/managedEnvironments",
                      "apiVersion": "2023-05-01",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "appLogsConfiguration": {
                          "destination": "log-analytics",
                          "logAnalyticsConfiguration": {
                            "customerId": "[reference(resourceId('Microsoft.OperationalInsights/workspaces', parameters('logAnalyticsWorkspaceName')), '2022-10-01').customerId]",
                            "sharedKey": "[listKeys(resourceId('Microsoft.OperationalInsights/workspaces', parameters('logAnalyticsWorkspaceName')), '2022-10-01').primarySharedKey]"
                          }
                        },
                        "daprAIInstrumentationKey": "[if(and(parameters('daprEnabled'), not(empty(parameters('applicationInsightsName')))), reference(resourceId('Microsoft.Insights/components', parameters('applicationInsightsName')), '2020-02-02').InstrumentationKey, '')]"
                      }
                    }
                  ],
                  "outputs": {
                    "defaultDomain": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.App/managedEnvironments', parameters('name')), '2023-05-01').defaultDomain]"
                    },
                    "id": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.App/managedEnvironments', parameters('name'))]"
                    },
                    "name": {
                      "type": "string",
                      "value": "[parameters('name')]"
                    }
                  }
                }
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-container-registry', parameters('name'))]",
              "resourceGroup": "[if(not(empty(parameters('containerRegistryResourceGroupName'))), parameters('containerRegistryResourceGroupName'), resourceGroup().name)]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[parameters('containerRegistryName')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "adminUserEnabled": {
                    "value": "[parameters('containerRegistryAdminUserEnabled')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.36.177.2456",
                      "templateHash": "5579757098889212448"
                    },
                    "description": "Creates an Azure Container Registry."
                  },
                  "parameters": {
                    "name": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]"
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {}
                    },
                    "adminUserEnabled": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Indicates whether admin user is enabled"
                      }
                    },
                    "anonymousPullEnabled": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Indicates whether anonymous pull is enabled"
                      }
                    },
                    "azureADAuthenticationAsArmPolicy": {
                      "type": "object",
                      "defaultValue": {
                        "status": "enabled"
                      },
                      "metadata": {
                        "description": "Azure ad authentication as arm policy settings"
                      }
                    },
                    "dataEndpointEnabled": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Indicates whether data endpoint is enabled"
                      }
                    },
                    "encryption": {
                      "type": "object",
                      "defaultValue": {
                        "status": "disabled"
                      },
                      "metadata": {
                        "description": "Encryption settings"
                      }
                    },
                    "exportPolicy": {
                      "type": "object",
                      "defaultValue": {
                        "status": "enabled"
                      },
                      "metadata": {
                        "description": "Export policy settings"
                      }
                    },
                    "metadataSearch": {
                      "type": "string",
                      "defaultValue": "Disabled",
                      "metadata": {
                        "description": "Metadata search settings"
                      }
                    },
                    "networkRuleBypassOptions": {
                      "type": "string",
                      "defaultValue": "AzureServices",
                      "metadata": {
                        "description": "Options for bypassing network rules"
                      }
                    },
                    "publicNetworkAccess": {
                      "type": "string",
                      "defaultValue": "Enabled",
                      "metadata": {
                        "description": "Public network access setting"
                      }
                    },
                    "quarantinePolicy": {
                      "type": "object",
                      "defaultValue": {
                        "status": "disabled"
                      },
                      "metadata": {
                        "description": "Quarantine policy settings"
                      }
                    },
                    "retentionPolicy": {
                      "type": "object",
                      "defaultValue": {
                        "days": 7,
                        "status": "disabled"
                      },
                      "metadata": {
                        "description": "Retention policy settings"
                      }
                    },
                    "scopeMaps": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Scope maps setting"
                      }
                    },
                    "sku": {
                      "type": "object",
                      "defaultValue": {
                        "name": "Basic"
                      },
                      "metadata": {
                        "description": "SKU settings"
                      }
                    },
                    "softDeletePolicy": {
                      "type": "object",
                      "defaultValue": {
                        "retentionDays": 7,
                        "status": "disabled"
                      },
                      "metadata": {
                        "description": "Soft delete policy settings"
                      }
                    },
                    "trustPolicy": {
                      "type": "object",
                      "defaultValue": {
                        "type": "Notary",
                        "status": "disabled"
                      },
                      "metadata": {
                        "description": "Trust policy settings"
                      }
                    },
                    "zoneRedundancy": {
                      "type": "string",
                      "defaultValue": "Disabled",
                      "metadata": {
                        "description": "Zone redundancy setting"
                      }
                    },
                    "workspaceId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "The log analytics workspace ID used for logging and monitoring"
                      }
                    }
                  },
                  "resources": [
                    {
                      "copy": {
                        "name": "containerRegistry::scopeMap",
                        "count": "[length(parameters('scopeMaps'))]"
                      },
                      "type": "Microsoft.ContainerRegistry/registries/scopeMaps",
                      "apiVersion": "2023-11-01-preview",
                      "name": "[format('{0}/{1}', parameters('name'), parameters('scopeMaps')[copyIndex()].name)]",
                      "properties": "[parameters('scopeMaps')[copyIndex()].properties]",
                      "dependsOn": [
                        "[resourceId('Microsoft.ContainerRegistry/registries', parameters('name'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.ContainerRegistry/registries",
                      "apiVersion": "2023-11-01-preview",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "sku": "[parameters('sku')]",
                      "properties": {
                        "adminUserEnabled": "[parameters('adminUserEnabled')]",
                        "anonymousPullEnabled": "[parameters('anonymousPullEnabled')]",
                        "dataEndpointEnabled": "[parameters('dataEndpointEnabled')]",
                        "encryption": "[parameters('encryption')]",
                        "metadataSearch": "[parameters('metadataSearch')]",
                        "networkRuleBypassOptions": "[parameters('networkRuleBypassOptions')]",
                        "policies": {
                          "quarantinePolicy": "[parameters('quarantinePolicy')]",
                          "trustPolicy": "[parameters('trustPolicy')]",
                          "retentionPolicy": "[parameters('retentionPolicy')]",
                          "exportPolicy": "[parameters('exportPolicy')]",
                          "azureADAuthenticationAsArmPolicy": "[parameters('azureADAuthenticationAsArmPolicy')]",
                          "softDeletePolicy": "[parameters('softDeletePolicy')]"
                        },
                        "publicNetworkAccess": "[parameters('publicNetworkAccess')]",
                        "zoneRedundancy": "[parameters('zoneRedundancy')]"
                      }
                    },
                    {
                      "condition": "[not(empty(parameters('workspaceId')))]",
                      "type": "Microsoft.Insights/diagnosticSettings",
                      "apiVersion": "2021-05-01-preview",
                      "scope": "[format('Microsoft.ContainerRegistry/registries/{0}', parameters('name'))]",
                      "name": "registry-diagnostics",
                      "properties": {
                        "workspaceId": "[parameters('workspaceId')]",
                        "logs": [
                          {
                            "category": "ContainerRegistryRepositoryEvents",
                            "enabled": true
                          },
                          {
                            "category": "ContainerRegistryLoginEvents",
                            "enabled": true
                          }
                        ],
                        "metrics": [
                          {
                            "category": "AllMetrics",
                            "enabled": true,
                            "timeGrain": "PT1M"
                          }
                        ]
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.ContainerRegistry/registries', parameters('name'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "id": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.ContainerRegistry/registries', parameters('name'))]"
                    },
                    "loginServer": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.ContainerRegistry/registries', parameters('name')), '2023-11-01-preview').loginServer]"
                    },
                    "name": {
                      "type": "string",
                      "value": "[parameters('name')]"
                    }
                  }
                }
              }
            }
          ],
          "outputs": {
            "defaultDomain": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}-container-apps-environment', parameters('name'))), '2022-09-01').outputs.defaultDomain.value]"
            },
            "environmentName": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}-container-apps-environment', parameters('name'))), '2022-09-01').outputs.name.value]"
            },
            "environmentId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}-container-apps-environment', parameters('name'))), '2022-09-01').outputs.id.value]"
            },
            "registryLoginServer": {
              "type": "string",
              "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('containerRegistryResourceGroupName'))), parameters('containerRegistryResourceGroupName'), resourceGroup().name)), 'Microsoft.Resources/deployments', format('{0}-container-registry', parameters('name'))), '2022-09-01').outputs.loginServer.value]"
            },
            "registryName": {
              "type": "string",
              "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('containerRegistryResourceGroupName'))), parameters('containerRegistryResourceGroupName'), resourceGroup().name)), 'Microsoft.Resources/deployments', format('{0}-container-registry', parameters('name'))), '2022-09-01').outputs.name.value]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('{0}-rg', parameters('name'))), 'Microsoft.Resources/deployments', 'loganalytics')]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', format('{0}-rg', parameters('name')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "aca",
      "resourceGroup": "[format('{0}-rg', parameters('name'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[replace(format('{0}-ca', take(variables('prefix'), 19)), '--', '-')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[variables('tags')]"
          },
          "identityName": {
            "value": "[format('{0}-id-aca', variables('prefix'))]"
          },
          "containerAppsEnvironmentName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('{0}-rg', parameters('name'))), 'Microsoft.Resources/deployments', 'container-apps'), '2022-09-01').outputs.environmentName.value]"
          },
          "containerRegistryName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('{0}-rg', parameters('name'))), 'Microsoft.Resources/deployments', 'container-apps'), '2022-09-01').outputs.registryName.value]"
          },
          "openAiDeploymentName": {
            "value": "[parameters('openAiDeploymentName')]"
          },
          "openAiEndpoint": "[if(parameters('createAzureOpenAi'), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('openAiResourceGroupName'))), parameters('openAiResourceGroupName'), format('{0}-rg', parameters('name')))), 'Microsoft.Resources/deployments', 'openai'), '2022-09-01').outputs.endpoint.value), createObject('value', parameters('openAiEndpoint')))]",
          "openAiApiVersion": {
            "value": "[parameters('openAiApiVersion')]"
          },
          "openAiKey": {
            "value": "[parameters('openAiKey')]"
          },
          "exists": {
            "value": "[parameters('acaExists')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.36.177.2456",
              "templateHash": "379317280244018992"
            }
          },
          "parameters": {
            "name": {
              "type": "string"
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            },
            "identityName": {
              "type": "string"
            },
            "containerAppsEnvironmentName": {
              "type": "string"
            },
            "containerRegistryName": {
              "type": "string"
            },
            "serviceName": {
              "type": "string",
              "defaultValue": "aca"
            },
            "exists": {
              "type": "bool"
            },
            "openAiDeploymentName": {
              "type": "string"
            },
            "openAiEndpoint": {
              "type": "string"
            },
            "openAiApiVersion": {
              "type": "string"
            },
            "openAiKey": {
              "type": "securestring",
              "defaultValue": ""
            }
          },
          "variables": {
            "secrets": "[if(not(empty(parameters('openAiKey'))), createObject('azure-openai-key', parameters('openAiKey')), createObject())]"
          },
          "resources": [
            {
              "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
              "apiVersion": "2023-01-31",
              "name": "[parameters('identityName')]",
              "location": "[parameters('location')]"
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-container-app-module', parameters('serviceName'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[parameters('name')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "tags": {
                    "value": "[union(parameters('tags'), createObject('azd-service-name', parameters('serviceName')))]"
                  },
                  "identityName": {
                    "value": "[parameters('identityName')]"
                  },
                  "exists": {
                    "value": "[parameters('exists')]"
                  },
                  "containerAppsEnvironmentName": {
                    "value": "[parameters('containerAppsEnvironmentName')]"
                  },
                  "containerRegistryName": {
                    "value": "[parameters('containerRegistryName')]"
                  },
                  "env": "[if(not(empty(parameters('openAiKey'))), createObject('value', union(createArray(createObject('name', 'OPENAI_HOST', 'value', 'azure'), createObject('name', 'OPENAI_MODEL', 'value', parameters('openAiDeploymentName')), createObject('name', 'AZURE_OPENAI_ENDPOINT', 'value', parameters('openAiEndpoint')), createObject('name', 'AZURE_OPENAI_API_VERSION', 'value', parameters('openAiApiVersion')), createObject('name', 'RUNNING_IN_PRODUCTION', 'value', 'true'), createObject('name', 'AZURE_CLIENT_ID', 'value', reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('identityName')), '2023-01-31').clientId)), createArray(createObject('name', 'AZURE_OPENAI_KEY_FOR_CHATVISION', 'secretRef', 'azure-openai-key')))), createObject('value', createArray(createObject('name', 'OPENAI_HOST', 'value', 'azure'), createObject('name', 'OPENAI_MODEL', 'value', parameters('openAiDeploymentName')), createObject('name', 'AZURE_OPENAI_ENDPOINT', 'value', parameters('openAiEndpoint')), createObject('name', 'AZURE_OPENAI_API_VERSION', 'value', parameters('openAiApiVersion')), createObject('name', 'RUNNING_IN_PRODUCTION', 'value', 'true'), createObject('name', 'AZURE_CLIENT_ID', 'value', reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('identityName')), '2023-01-31').clientId))))]",
                  "secrets": {
                    "value": "[variables('secrets')]"
                  },
                  "targetPort": {
                    "value": 50505
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.36.177.2456",
                      "templateHash": "1086091004389044862"
                    },
                    "description": "Creates or updates an existing Azure Container App."
                  },
                  "parameters": {
                    "name": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]"
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {}
                    },
                    "containerAppsEnvironmentName": {
                      "type": "string",
                      "metadata": {
                        "description": "The environment name for the container apps"
                      }
                    },
                    "containerCpuCoreCount": {
                      "type": "string",
                      "defaultValue": "0.5",
                      "metadata": {
                        "description": "The number of CPU cores allocated to a single container instance, e.g., 0.5"
                      }
                    },
                    "containerMaxReplicas": {
                      "type": "int",
                      "defaultValue": 10,
                      "minValue": 1,
                      "metadata": {
                        "description": "The maximum number of replicas to run. Must be at least 1."
                      }
                    },
                    "containerMemory": {
                      "type": "string",
                      "defaultValue": "1.0Gi",
                      "metadata": {
                        "description": "The amount of memory allocated to a single container instance, e.g., 1Gi"
                      }
                    },
                    "containerMinReplicas": {
                      "type": "int",
                      "defaultValue": 1,
                      "minValue": 1,
                      "metadata": {
                        "description": "The minimum number of replicas to run. Must be at least 1."
                      }
                    },
                    "containerName": {
                      "type": "string",
                      "defaultValue": "main",
                      "metadata": {
                        "description": "The name of the container"
                      }
                    },
                    "containerRegistryName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "The name of the container registry"
                      }
                    },
                    "containerRegistryHostSuffix": {
                      "type": "string",
                      "defaultValue": "azurecr.io",
                      "metadata": {
                        "description": "Hostname suffix for container registry. Set when deploying to sovereign clouds"
                      }
                    },
                    "daprAppProtocol": {
                      "type": "string",
                      "defaultValue": "http",
                      "allowedValues": [
                        "http",
                        "grpc"
                      ],
                      "metadata": {
                        "description": "The protocol used by Dapr to connect to the app, e.g., HTTP or gRPC"
                      }
                    },
                    "daprEnabled": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Enable or disable Dapr for the container app"
                      }
                    },
                    "daprAppId": {
                      "type": "string",
                      "defaultValue": "[parameters('containerName')]",
                      "metadata": {
                        "description": "The Dapr app ID"
                      }
                    },
                    "exists": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Specifies if the resource already exists"
                      }
                    },
                    "ingressEnabled": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Specifies if Ingress is enabled for the container app"
                      }
                    },
                    "identityType": {
                      "type": "string",
                      "defaultValue": "None",
                      "allowedValues": [
                        "None",
                        "SystemAssigned",
                        "UserAssigned"
                      ],
                      "metadata": {
                        "description": "The type of identity for the resource"
                      }
                    },
                    "identityName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "The name of the user-assigned identity"
                      }
                    },
                    "imageName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "The name of the container image"
                      }
                    },
                    "secrets": {
                      "type": "secureObject",
                      "defaultValue": {},
                      "metadata": {
                        "description": "The secrets required for the container"
                      }
                    },
                    "env": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "The environment variables for the container"
                      }
                    },
                    "external": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Specifies if the resource ingress is exposed externally"
                      }
                    },
                    "serviceBinds": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "The service binds associated with the container"
                      }
                    },
                    "targetPort": {
                      "type": "int",
                      "defaultValue": 80,
                      "metadata": {
                        "description": "The target port for the container"
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-update', deployment().name)]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[parameters('name')]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          },
                          "identityType": {
                            "value": "[parameters('identityType')]"
                          },
                          "identityName": {
                            "value": "[parameters('identityName')]"
                          },
                          "ingressEnabled": {
                            "value": "[parameters('ingressEnabled')]"
                          },
                          "containerName": {
                            "value": "[parameters('containerName')]"
                          },
                          "containerAppsEnvironmentName": {
                            "value": "[parameters('containerAppsEnvironmentName')]"
                          },
                          "containerRegistryName": {
                            "value": "[parameters('containerRegistryName')]"
                          },
                          "containerRegistryHostSuffix": {
                            "value": "[parameters('containerRegistryHostSuffix')]"
                          },
                          "containerCpuCoreCount": {
                            "value": "[parameters('containerCpuCoreCount')]"
                          },
                          "containerMemory": {
                            "value": "[parameters('containerMemory')]"
                          },
                          "containerMinReplicas": {
                            "value": "[parameters('containerMinReplicas')]"
                          },
                          "containerMaxReplicas": {
                            "value": "[parameters('containerMaxReplicas')]"
                          },
                          "daprEnabled": {
                            "value": "[parameters('daprEnabled')]"
                          },
                          "daprAppId": {
                            "value": "[parameters('daprAppId')]"
                          },
                          "daprAppProtocol": {
                            "value": "[parameters('daprAppProtocol')]"
                          },
                          "secrets": {
                            "value": "[parameters('secrets')]"
                          },
                          "external": {
                            "value": "[parameters('external')]"
                          },
                          "env": {
                            "value": "[parameters('env')]"
                          },
                          "imageName": "[if(not(empty(parameters('imageName'))), createObject('value', parameters('imageName')), if(parameters('exists'), createObject('value', reference(resourceId('Microsoft.App/containerApps', parameters('name')), '2023-05-02-preview').template.containers[0].image), createObject('value', '')))]",
                          "targetPort": {
                            "value": "[parameters('targetPort')]"
                          },
                          "serviceBinds": {
                            "value": "[parameters('serviceBinds')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.36.177.2456",
                              "templateHash": "16428415284199647071"
                            },
                            "description": "Creates a container app in an Azure Container App environment."
                          },
                          "parameters": {
                            "name": {
                              "type": "string"
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]"
                            },
                            "tags": {
                              "type": "object",
                              "defaultValue": {}
                            },
                            "allowedOrigins": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Allowed origins"
                              }
                            },
                            "containerAppsEnvironmentName": {
                              "type": "string",
                              "metadata": {
                                "description": "Name of the environment for container apps"
                              }
                            },
                            "containerCpuCoreCount": {
                              "type": "string",
                              "defaultValue": "0.5",
                              "metadata": {
                                "description": "CPU cores allocated to a single container instance, e.g., 0.5"
                              }
                            },
                            "containerMaxReplicas": {
                              "type": "int",
                              "defaultValue": 10,
                              "minValue": 1,
                              "metadata": {
                                "description": "The maximum number of replicas to run. Must be at least 1."
                              }
                            },
                            "containerMemory": {
                              "type": "string",
                              "defaultValue": "1.0Gi",
                              "metadata": {
                                "description": "Memory allocated to a single container instance, e.g., 1Gi"
                              }
                            },
                            "containerMinReplicas": {
                              "type": "int",
                              "defaultValue": 1,
                              "metadata": {
                                "description": "The minimum number of replicas to run. Must be at least 1."
                              }
                            },
                            "containerName": {
                              "type": "string",
                              "defaultValue": "main",
                              "metadata": {
                                "description": "The name of the container"
                              }
                            },
                            "containerRegistryName": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "The name of the container registry"
                              }
                            },
                            "containerRegistryHostSuffix": {
                              "type": "string",
                              "defaultValue": "azurecr.io",
                              "metadata": {
                                "description": "Hostname suffix for container registry. Set when deploying to sovereign clouds"
                              }
                            },
                            "daprAppProtocol": {
                              "type": "string",
                              "defaultValue": "http",
                              "allowedValues": [
                                "http",
                                "grpc"
                              ],
                              "metadata": {
                                "description": "The protocol used by Dapr to connect to the app, e.g., http or grpc"
                              }
                            },
                            "daprAppId": {
                              "type": "string",
                              "defaultValue": "[parameters('containerName')]",
                              "metadata": {
                                "description": "The Dapr app ID"
                              }
                            },
                            "daprEnabled": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Enable Dapr"
                              }
                            },
                            "env": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "The environment variables for the container"
                              }
                            },
                            "external": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Specifies if the resource ingress is exposed externally"
                              }
                            },
                            "identityName": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "The name of the user-assigned identity"
                              }
                            },
                            "identityType": {
                              "type": "string",
                              "defaultValue": "None",
                              "allowedValues": [
                                "None",
                                "SystemAssigned",
                                "UserAssigned"
                              ],
                              "metadata": {
                                "description": "The type of identity for the resource"
                              }
                            },
                            "imageName": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "The name of the container image"
                              }
                            },
                            "ingressEnabled": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Specifies if Ingress is enabled for the container app"
                              }
                            },
                            "revisionMode": {
                              "type": "string",
                              "defaultValue": "Single"
                            },
                            "secrets": {
                              "type": "secureObject",
                              "defaultValue": {},
                              "metadata": {
                                "description": "The secrets required for the container"
                              }
                            },
                            "serviceBinds": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "The service binds associated with the container"
                              }
                            },
                            "serviceType": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "The name of the container apps add-on to use. e.g. redis"
                              }
                            },
                            "targetPort": {
                              "type": "int",
                              "defaultValue": 80,
                              "metadata": {
                                "description": "The target port for the container"
                              }
                            }
                          },
                          "variables": {
                            "usePrivateRegistry": "[and(not(empty(parameters('identityName'))), not(empty(parameters('containerRegistryName'))))]",
                            "normalizedIdentityType": "[if(not(empty(parameters('identityName'))), 'UserAssigned', parameters('identityType'))]"
                          },
                          "resources": [
                            {
                              "type": "Microsoft.App/containerApps",
                              "apiVersion": "2023-05-02-preview",
                              "name": "[parameters('name')]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tags')]",
                              "identity": {
                                "type": "[variables('normalizedIdentityType')]",
                                "userAssignedIdentities": "[if(and(not(empty(parameters('identityName'))), equals(variables('normalizedIdentityType'), 'UserAssigned')), createObject(format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('identityName'))), createObject()), null())]"
                              },
                              "properties": {
                                "managedEnvironmentId": "[resourceId('Microsoft.App/managedEnvironments', parameters('containerAppsEnvironmentName'))]",
                                "configuration": {
                                  "copy": [
                                    {
                                      "name": "secrets",
                                      "count": "[length(items(parameters('secrets')))]",
                                      "input": {
                                        "name": "[items(parameters('secrets'))[copyIndex('secrets')].key]",
                                        "value": "[items(parameters('secrets'))[copyIndex('secrets')].value]"
                                      }
                                    }
                                  ],
                                  "activeRevisionsMode": "[parameters('revisionMode')]",
                                  "ingress": "[if(parameters('ingressEnabled'), createObject('external', parameters('external'), 'targetPort', parameters('targetPort'), 'transport', 'auto', 'corsPolicy', createObject('allowedOrigins', union(createArray('https://portal.azure.com', 'https://ms.portal.azure.com'), parameters('allowedOrigins')))), null())]",
                                  "dapr": "[if(parameters('daprEnabled'), createObject('enabled', true(), 'appId', parameters('daprAppId'), 'appProtocol', parameters('daprAppProtocol'), 'appPort', if(parameters('ingressEnabled'), parameters('targetPort'), 0)), createObject('enabled', false()))]",
                                  "service": "[if(not(empty(parameters('serviceType'))), createObject('type', parameters('serviceType')), null())]",
                                  "registries": "[if(variables('usePrivateRegistry'), createArray(createObject('server', format('{0}.{1}', parameters('containerRegistryName'), parameters('containerRegistryHostSuffix')), 'identity', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('identityName')))), createArray())]"
                                },
                                "template": {
                                  "serviceBinds": "[if(not(empty(parameters('serviceBinds'))), parameters('serviceBinds'), null())]",
                                  "containers": [
                                    {
                                      "image": "[if(not(empty(parameters('imageName'))), parameters('imageName'), 'mcr.microsoft.com/azuredocs/containerapps-helloworld:latest')]",
                                      "name": "[parameters('containerName')]",
                                      "env": "[parameters('env')]",
                                      "resources": {
                                        "cpu": "[json(parameters('containerCpuCoreCount'))]",
                                        "memory": "[parameters('containerMemory')]"
                                      }
                                    }
                                  ],
                                  "scale": {
                                    "minReplicas": "[parameters('containerMinReplicas')]",
                                    "maxReplicas": "[parameters('containerMaxReplicas')]"
                                  }
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Resources/deployments', format('{0}-registry-access', deployment().name))]"
                              ]
                            },
                            {
                              "condition": "[variables('usePrivateRegistry')]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-registry-access', deployment().name)]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "containerRegistryName": {
                                    "value": "[parameters('containerRegistryName')]"
                                  },
                                  "principalId": "[if(variables('usePrivateRegistry'), createObject('value', reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('identityName')), '2023-01-31').principalId), createObject('value', ''))]"
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.36.177.2456",
                                      "templateHash": "12489844250536530841"
                                    },
                                    "description": "Assigns ACR Pull permissions to access an Azure Container Registry."
                                  },
                                  "parameters": {
                                    "containerRegistryName": {
                                      "type": "string"
                                    },
                                    "principalId": {
                                      "type": "string"
                                    }
                                  },
                                  "variables": {
                                    "acrPullRole": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '7f951dda-4ed3-4680-a7ca-43fe172d538d')]"
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Authorization/roleAssignments",
                                      "apiVersion": "2022-04-01",
                                      "scope": "[format('Microsoft.ContainerRegistry/registries/{0}', parameters('containerRegistryName'))]",
                                      "name": "[guid(subscription().id, resourceGroup().id, parameters('principalId'), variables('acrPullRole'))]",
                                      "properties": {
                                        "roleDefinitionId": "[variables('acrPullRole')]",
                                        "principalType": "ServicePrincipal",
                                        "principalId": "[parameters('principalId')]"
                                      }
                                    }
                                  ]
                                }
                              }
                            }
                          ],
                          "outputs": {
                            "defaultDomain": {
                              "type": "string",
                              "value": "[reference(resourceId('Microsoft.App/managedEnvironments', parameters('containerAppsEnvironmentName')), '2023-05-01').defaultDomain]"
                            },
                            "identityPrincipalId": {
                              "type": "string",
                              "value": "[if(equals(variables('normalizedIdentityType'), 'None'), '', if(empty(parameters('identityName')), reference(resourceId('Microsoft.App/containerApps', parameters('name')), '2023-05-02-preview', 'full').identity.principalId, reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('identityName')), '2023-01-31').principalId))]"
                            },
                            "imageName": {
                              "type": "string",
                              "value": "[parameters('imageName')]"
                            },
                            "name": {
                              "type": "string",
                              "value": "[parameters('name')]"
                            },
                            "serviceBind": {
                              "type": "object",
                              "value": "[if(not(empty(parameters('serviceType'))), createObject('serviceId', resourceId('Microsoft.App/containerApps', parameters('name')), 'name', parameters('name')), createObject())]"
                            },
                            "uri": {
                              "type": "string",
                              "value": "[if(parameters('ingressEnabled'), format('https://{0}', reference(resourceId('Microsoft.App/containerApps', parameters('name')), '2023-05-02-preview').configuration.ingress.fqdn), '')]"
                            }
                          }
                        }
                      }
                    }
                  ],
                  "outputs": {
                    "defaultDomain": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}-update', deployment().name)), '2022-09-01').outputs.defaultDomain.value]"
                    },
                    "imageName": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}-update', deployment().name)), '2022-09-01').outputs.imageName.value]"
                    },
                    "name": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}-update', deployment().name)), '2022-09-01').outputs.name.value]"
                    },
                    "uri": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}-update', deployment().name)), '2022-09-01').outputs.uri.value]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('identityName'))]"
              ]
            }
          ],
          "outputs": {
            "SERVICE_ACA_IDENTITY_PRINCIPAL_ID": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('identityName')), '2023-01-31').principalId]"
            },
            "SERVICE_ACA_NAME": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}-container-app-module', parameters('serviceName'))), '2022-09-01').outputs.name.value]"
            },
            "SERVICE_ACA_URI": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}-container-app-module', parameters('serviceName'))), '2022-09-01').outputs.uri.value]"
            },
            "SERVICE_ACA_IMAGE_NAME": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}-container-app-module', parameters('serviceName'))), '2022-09-01').outputs.imageName.value]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('{0}-rg', parameters('name'))), 'Microsoft.Resources/deployments', 'container-apps')]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('openAiResourceGroupName'))), parameters('openAiResourceGroupName'), format('{0}-rg', parameters('name')))), 'Microsoft.Resources/deployments', 'openai')]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', format('{0}-rg', parameters('name')))]"
      ]
    },
    {
      "condition": "[and(parameters('createRoleForUser'), parameters('createAzureOpenAi'))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "openai-role-user",
      "resourceGroup": "[if(not(empty(parameters('openAiResourceGroupName'))), parameters('openAiResourceGroupName'), format('{0}-rg', parameters('name')))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "principalId": {
            "value": "[parameters('principalId')]"
          },
          "roleDefinitionId": {
            "value": "5e0bd9bd-7b93-4f28-af87-19fc36ad61bd"
          },
          "principalType": {
            "value": "User"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.36.177.2456",
              "templateHash": "14223167216489085881"
            },
            "description": "Creates a role assignment for a service principal."
          },
          "parameters": {
            "principalId": {
              "type": "string"
            },
            "principalType": {
              "type": "string",
              "defaultValue": "ServicePrincipal",
              "allowedValues": [
                "Device",
                "ForeignGroup",
                "Group",
                "ServicePrincipal",
                "User"
              ]
            },
            "roleDefinitionId": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "name": "[guid(subscription().id, resourceGroup().id, parameters('principalId'), parameters('roleDefinitionId'))]",
              "properties": {
                "principalId": "[parameters('principalId')]",
                "principalType": "[parameters('principalType')]",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', parameters('roleDefinitionId'))]"
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', format('{0}-rg', parameters('name')))]"
      ]
    },
    {
      "condition": "[parameters('createAzureOpenAi')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "openai-role-backend",
      "resourceGroup": "[if(not(empty(parameters('openAiResourceGroupName'))), parameters('openAiResourceGroupName'), format('{0}-rg', parameters('name')))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "principalId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('{0}-rg', parameters('name'))), 'Microsoft.Resources/deployments', 'aca'), '2022-09-01').outputs.SERVICE_ACA_IDENTITY_PRINCIPAL_ID.value]"
          },
          "roleDefinitionId": {
            "value": "5e0bd9bd-7b93-4f28-af87-19fc36ad61bd"
          },
          "principalType": {
            "value": "ServicePrincipal"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.36.177.2456",
              "templateHash": "14223167216489085881"
            },
            "description": "Creates a role assignment for a service principal."
          },
          "parameters": {
            "principalId": {
              "type": "string"
            },
            "principalType": {
              "type": "string",
              "defaultValue": "ServicePrincipal",
              "allowedValues": [
                "Device",
                "ForeignGroup",
                "Group",
                "ServicePrincipal",
                "User"
              ]
            },
            "roleDefinitionId": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "name": "[guid(subscription().id, resourceGroup().id, parameters('principalId'), parameters('roleDefinitionId'))]",
              "properties": {
                "principalId": "[parameters('principalId')]",
                "principalType": "[parameters('principalType')]",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', parameters('roleDefinitionId'))]"
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('{0}-rg', parameters('name'))), 'Microsoft.Resources/deployments', 'aca')]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', format('{0}-rg', parameters('name')))]"
      ]
    }
  ],
  "outputs": {
    "AZURE_LOCATION": {
      "type": "string",
      "value": "[parameters('location')]"
    },
    "AZURE_RESOURCE_GROUP": {
      "type": "string",
      "value": "[format('{0}-rg', parameters('name'))]"
    },
    "AZURE_TENANT_ID": {
      "type": "string",
      "value": "[tenant().tenantId]"
    },
    "AZURE_OPENAI_RESOURCE_NAME": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('openAiResourceGroupName'))), parameters('openAiResourceGroupName'), format('{0}-rg', parameters('name')))), 'Microsoft.Resources/deployments', 'openai'), '2022-09-01').outputs.name.value]"
    },
    "AZURE_OPENAI_DEPLOYMENT": {
      "type": "string",
      "value": "[parameters('openAiDeploymentName')]"
    },
    "AZURE_OPENAI_API_VERSION": {
      "type": "string",
      "value": "[parameters('openAiApiVersion')]"
    },
    "AZURE_OPENAI_ENDPOINT": {
      "type": "string",
      "value": "[if(parameters('createAzureOpenAi'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, if(not(empty(parameters('openAiResourceGroupName'))), parameters('openAiResourceGroupName'), format('{0}-rg', parameters('name')))), 'Microsoft.Resources/deployments', 'openai'), '2022-09-01').outputs.endpoint.value, parameters('openAiEndpoint'))]"
    },
    "SERVICE_ACA_IDENTITY_PRINCIPAL_ID": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('{0}-rg', parameters('name'))), 'Microsoft.Resources/deployments', 'aca'), '2022-09-01').outputs.SERVICE_ACA_IDENTITY_PRINCIPAL_ID.value]"
    },
    "SERVICE_ACA_NAME": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('{0}-rg', parameters('name'))), 'Microsoft.Resources/deployments', 'aca'), '2022-09-01').outputs.SERVICE_ACA_NAME.value]"
    },
    "SERVICE_ACA_URI": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('{0}-rg', parameters('name'))), 'Microsoft.Resources/deployments', 'aca'), '2022-09-01').outputs.SERVICE_ACA_URI.value]"
    },
    "SERVICE_ACA_IMAGE_NAME": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('{0}-rg', parameters('name'))), 'Microsoft.Resources/deployments', 'aca'), '2022-09-01').outputs.SERVICE_ACA_IMAGE_NAME.value]"
    },
    "AZURE_CONTAINER_ENVIRONMENT_NAME": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('{0}-rg', parameters('name'))), 'Microsoft.Resources/deployments', 'container-apps'), '2022-09-01').outputs.environmentName.value]"
    },
    "AZURE_CONTAINER_REGISTRY_ENDPOINT": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('{0}-rg', parameters('name'))), 'Microsoft.Resources/deployments', 'container-apps'), '2022-09-01').outputs.registryLoginServer.value]"
    },
    "AZURE_CONTAINER_REGISTRY_NAME": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('{0}-rg', parameters('name'))), 'Microsoft.Resources/deployments', 'container-apps'), '2022-09-01').outputs.registryName.value]"
    }
  }
}