name: Deploy to Azure

on:
  workflow_dispatch:
  push:
    # Run when commits are pushed to mainline branch
    branches:
      - main
  pull_request:
    # Run the same validation (provision+deploy+smoke) for PRs targeting main
    branches:
      - main

# GitHub Actions workflow to deploy to Azure using azd
# To configure required secrets for connecting to Azure, simply run `azd pipeline config`

# Set up permissions for deploying with secretless Azure federated credentials
# https://learn.microsoft.com/en-us/azure/developer/github/connect-from-azure?tabs=azure-portal%2Clinux#set-up-azure-login-with-openid-connect-authentication
permissions:
  id-token: write
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
        uri: ${{ steps.output.outputs.uri }}
    env:
      AZURE_CLIENT_ID: ${{ vars.AZURE_CLIENT_ID }}
      AZURE_TENANT_ID: ${{ vars.AZURE_TENANT_ID }}
      AZURE_SUBSCRIPTION_ID: ${{ vars.AZURE_SUBSCRIPTION_ID }}
      AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}
      # Project-specific variables
      AZURE_OPENAI_LOCATION: ${{ vars.AZURE_OPENAI_LOCATION }}
      AZURE_OPENAI_MODEL: ${{ vars.AZURE_OPENAI_MODEL }}
      AZURE_OPENAI_MODEL_VERSION: ${{ vars.AZURE_OPENAI_MODEL_VERSION }}
      AZURE_OPENAI_DEPLOYMENT: ${{ vars.AZURE_OPENAI_DEPLOYMENT }}
      AZURE_OPENAI_DEPLOYMENT_CAPACITY: ${{ vars.AZURE_OPENAI_DEPLOYMENT_CAPACITY }}
      AZURE_OPENAI_DEPLOYMENT_SKU_NAME: ${{ vars.AZURE_OPENAI_DEPLOYMENT_SKU_NAME }}
      AZURE_OPENAI_RESOURCE: ${{ vars.AZURE_OPENAI_RESOURCE }}
      AZURE_OPENAI_RESOURCE_GROUP: ${{ vars.AZURE_OPENAI_RESOURCE_GROUP }}
      AZURE_OPENAI_RESOURCE_GROUP_LOCATION: ${{ vars.AZURE_OPENAI_RESOURCE_GROUP_LOCATION }}
      AZURE_OPENAI_SKU_NAME: ${{ vars.AZURE_OPENAI_SKU_NAME }}
      AZURE_OPENAI_API_VERSION: ${{ vars.AZURE_OPENAI_API_VERSION }}
      CREATE_AZURE_OPENAI: ${{ vars.CREATE_AZURE_OPENAI }}
      AZURE_OPENAI_KEY_FOR_CHATVISION: ${{ vars.AZURE_OPENAI_KEY_FOR_CHATVISION }}
      AZURE_OPENAI_ENDPOINT: ${{ vars.AZURE_OPENAI_ENDPOINT }}
      CREATE_ROLE_FOR_USER: ${{ vars.CREATE_ROLE_FOR_USER }}
      SERVICE_ACA_RESOURCE_EXISTS: ${{ vars.SERVICE_ACA_RESOURCE_EXISTS }}
      DISABLE_KEY_BASED_AUTH: ${{ vars.DISABLE_KEY_BASED_AUTH }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Install azd
        uses: Azure/setup-azd@v2.2.0

      - name: Log in with Azure (Federated Credentials)
        run: |
          azd auth login `
            --client-id "$Env:AZURE_CLIENT_ID" `
            --federated-credential-provider "github" `
            --tenant-id "$Env:AZURE_TENANT_ID"
        shell: pwsh

      - name: Provision Infrastructure
        run: |
          azd env set CREATE_ROLE_FOR_USER false --no-prompt
          azd provision --no-prompt
        env:
          AZURE_ENV_NAME: ${{ vars.AZURE_ENV_NAME }}
          AZURE_LOCATION: ${{ vars.AZURE_LOCATION }}
          AZURE_SUBSCRIPTION_ID: ${{ vars.AZURE_SUBSCRIPTION_ID }}

      - name: Deploy Application
        run: azd deploy --no-prompt
        env:
          AZURE_ENV_NAME: ${{ vars.AZURE_ENV_NAME }}
          AZURE_LOCATION: ${{ vars.AZURE_LOCATION }}
          AZURE_SUBSCRIPTION_ID: ${{ vars.AZURE_SUBSCRIPTION_ID }}

      - name: Output Deployment URI
        id: output
        run: |
          azd env get-values > .env
          source .env
          echo "uri=$SERVICE_ACA_URI" >> "$GITHUB_OUTPUT"


  smoketests:
    runs-on: ubuntu-latest
    needs: build
    steps:

      - name: Basic smoke test (curl)
        env:
          URI: ${{needs.build.outputs.uri}}
        run: |
          echo "Sleeping 1 minute due to https://github.com/Azure/azure-dev/issues/2669"
          sleep 60
          curl -sSf $URI

      - name: Checkout
        uses: actions/checkout@v5

      - name: Set up Python (for Playwright test)
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - name: Install Playwright (Python) and Browsers
        run: |
          pip install --no-cache-dir playwright
          python -m playwright install --with-deps chromium

      - name: End-to-End Chat UI Test (Playwright)
        shell: bash
        env:
          AZURE_ENV_NAME: ${{ vars.AZURE_ENV_NAME }}
          URI: ${{needs.build.outputs.uri}}
        run: |
          python scripts/e2e_chat_playwright.py $URI
